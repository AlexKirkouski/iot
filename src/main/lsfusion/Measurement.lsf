MODULE Measurement;

REQUIRE OrgDevice, Utils, Time, Security;

CLASS MeasurementType 'Тип измерения';
TABLE measurementType (MeasurementType);

id 'ID панели' = DATA LONG (MeasurementType);
name 'Название измерения' = DATA STRING[100] (MeasurementType) CHARWIDTH 70;
filePanel 'Файл шаблона Panel' = DATA FILE (MeasurementType) CHARWIDTH 7 IN id ;

number 'Номер в CSV-файле' = DATA INTEGER (DeviceType, MeasurementType);
index 'Индекс Panel' = DATA INTEGER (DeviceType, MeasurementType) CHARWIDTH 7 IN id;

// уникальность и обязательность заполнения
measurementType = GROUP AGGR MeasurementType mt BY id(mt);
CONSTRAINT MeasurementType mt IS MeasurementType AND NOT id(mt) MESSAGE 'Не заполнен ID панели для типа измерения !';

CLASS Measurement 'Измерение';
device = DATA Device (Measurement);
deviceId 'ИД устройства' (Measurement m) = id(device(m)) MATERIALIZED;
nameDeviceType 'Тип устройства' (Measurement m) = name(type(device(m)));
dateTime 'Время измерения' = DATA DATETIME (Measurement);
idImport 'ИД импортируемое' = DATA LONG (Measurement);

///// Добавляем типы измерений на форму "Устройства и их типы"
EXTEND FORM devices
    OBJECTS mt = MeasurementType
    PROPERTIES (mt) id, name
    PROPERTIES(t, mt) number, index
    PROPERTIES (mt) filePanel, NEW, DELETE
    ORDER id(mt)
;

DESIGN devices {
    NEW split {
        type = SPLITV;
        NEW types {
            type = SPLITH ;
            MOVE BOX(t) {
                caption = 'Типы устройств';
                flex = 1;
            }
            fill = 1;
        }
        NEW tab {
            type = SPLITH ;
            MOVE BOX(d) {
                caption = 'Устройства';
                flex = 1;
            }
            MOVE BOX(mt) {
                caption = 'Типы измерений';
                flex = 1;
            }
            fill = 2;
        }
        fill = 1;
    }
    MOVE TOOLBARBOX;
}
/////

///// Таблица, из которой Grafana берет данные
TABLE values (Measurement, MeasurementType);
value 'Значение' = DATA DOUBLE (Measurement, MeasurementType);
dateTime (Measurement m, MeasurementType mt) = dateTime(m) IF value(m, mt) MATERIALIZED ;
id (Measurement m, MeasurementType mt) = id(device(m)) IF value(m, mt) MATERIALIZED ;
id_MeasurementType (Measurement m, MeasurementType mt) = id(mt) IF value(m, mt) MATERIALIZED ;
/////

INDEX dateTime(Measurement m), m;
lastMeasurement = GROUP LAST Measurement m ORDER dateTime(m), m BY device(m) MATERIALIZED;
lastValue (Device d, MeasurementType m) = value(lastMeasurement(d), m) MATERIALIZED;

onDelMeasurement 'Очистка всех измерений' (Measurement) {
    ASK 'Вы действительно хотите\nочистить все измерения?' DO {
        DELETE Measurement m WHERE m IS Measurement;
        APPLY; 
        MESSAGE 'Операция выполнена';
    }
}

FORM clsMeasurement 'Очистка измерений'
    OBJECTS o1 = Measurement
    PROPERTIES onDelMeasurement(o1)
;

EXTEND FORM customUser
    PROPERTIES(u) nameOrganization
;

EXTEND FORM customUsers
    PROPERTIES(u) READONLY nameOrganization BEFORE login(u)
;
//


///// Форма "Организации - устройства - измерения"

FORM orgMeasurements 'Измерения по организациям'
    
    OBJECTS o = Organization
    PROPERTIES(o) READONLY name
    FILTERS mainRole(currentUser()) == userRoleSID('admins') OR (mainRole(currentUser()) == userRoleSID('users') AND organization(currentUser()) == o) 
    
    OBJECTS d = Device
//    PROPERTIES(d) READONLY id
    PROPERTIES(d) READONLY id
    FILTERS organization(d) = o
    ORDER id(d)
    
    OBJECTS cmt = MeasurementType
    FILTERS index(type(d),cmt)
    
    OBJECTS m = Measurement
    PROPERTIES(m) READONLY dateTime  
    PROPERTIES 'ID устройства'=(OVERRIDE deviceId(m)+'', idImport(m) + ' (не найдено)') READONLY
    PROPERTIES value(m, cmt) COLUMNS (cmt) HEADER name(cmt) READONLY 
    FILTERS index(type(device(m)),cmt) AND device(m)=d
    ORDER dateTime(m) DESC
;

DESIGN orgMeasurements {
    OBJECTS {
        NEW split {
            type = SPLITV;
            NEW clients {
                type = SPLITH ;
                MOVE BOX(o) {
                    caption = 'Организации';
                    flex = 1;
                }
                fill = 1;
            }
            NEW tab {
                type = SPLITH ;
                MOVE BOX(d) {
                    caption = 'Устройства';
                    flex = 2;
                }
                MOVE BOX(m) {
                    caption = 'Измерения';
                    flex = 10;
                }
                fill = 2;
            }
            fill = 1;
        }
    }
}


///// ПЕРЕДАЧА В GRAFANA
// Параметры
cmd 'Команда' = DATA LOCAL INTEGER ();
eCode 'Код ошибки' = DATA LOCAL INTEGER (); // Если 0 - все хорошо, 1 - ошибка, 9 - критическая ошибка
eMessage 'Текст последней ошибки' = DATA LOCAL TEXT ();
grurl 'Адрес URL Grafana' = DATA LOCAL STRING[200] ();
aut 'Базовая аунтификация' = DATA LOCAL STRING[60] ();
txtDashBoard 'Текст дашборда' = DATA LOCAL TEXT ();

setParam 'Начальная установка параметров' () {
    eCode() <- 0;
    eMessage() <- '';
    txtDashBoard() <- '';
    grurl() <- 'http://' + grafanaUrl() + '/';
    aut() <- grafanaLogin() + ':' + grafanaPwd();
}

// Обновление организации
crGrafana INTERNAL 'grafana.GrafanaAction' (Organization, INTEGER);

onUpdateOrg 'GRAFANA: Обновить организацию' (Organization o) {
    
    EXEC setParam();
    cmd() <- 1;
    // вызываем обработку типа INTERNAL
    crGrafana(o, 0) ;
    IF eCode() > 0 THEN MESSAGE eMessage() ;
    IF eCode() < 9 THEN APPLY ;
}

//onPrint INTERNAL 'sclass.ConPrintAction' (STRING ); 

// Обновление DashBoards
dsGrafana INTERNAL 'grafana.GrafanaAction' (Organization, Device);

onUpdateDB 'GRAFANA: Обновить DashBoards' (Organization o, Device dcur) {
    
    IF NOT countSelect() THEN {MESSAGE 'Отсутствуют отмеченные устройства !';RETURN ;}
    
    FOR organization(Device d) = o AND select(d) ORDER id(d) DO {
        
        IF NOT fileDashboard(type(d)) THEN {
            MESSAGE 'Отсутствует файл шаблона для устройства ' + id(d) NOWAIT ;
        }
        ELSE {                
            LOCAL textDashboard = TEXT ();
            LOCAL textAllPanels = TEXT ();
            
            fileToString(fileDashboard(type(d))) ;
            textDashboard() <- resultString();
            textAllPanels() <- '';
            
            FOR index(type(d), MeasurementType mt) ORDER index(type(d), mt) DO {
                IF filePanel(mt) THEN {
                    fileToString(filePanel(mt));
                    resultString() <- replace(resultString(), '<<ID_PANEL>>', TEXT (id(mt)));
                    resultString() <- replace(resultString(), '<<NAME_PANEL>>', name(mt));
                    resultString() <- replace(resultString(), '<<ID_DEVICE>>', TEXT (id(d)));
                    resultString() <- replace(resultString(), '<<ID_MeasurementType>>', TEXT (id(mt)));
                
                    IF length(textAllPanels()) > 0 THEN  textAllPanels() <- textAllPanels() + ',';
                    textAllPanels() <- textAllPanels() + resultString();
                }    
            }
            
            IF length(textAllPanels()) > 0 THEN {
                textDashboard() <- replace(textDashboard(), '<<TITLE>>', name(o) + '_' + TEXT (id(d)));
                textDashboard() <- replace(textDashboard(), '<<PANELS>>', textAllPanels());
    
                EXEC setParam();
                cmd() <- 3;
                txtDashBoard() <- textDashboard();
                // вызываем обработку типа INTERNAL
                dsGrafana(o, d);
            
                IF eCode() > 0 THEN {
                    ASK 'Устройство  '+ id(d) + '  Ошибка: \n' + eMessage() +'\n\n Продолжить ?' yes = YESNO DO {
                        IF NOT yes THEN eCode() <- -1;
                    }
                }
                IF eCode() < 0 THEN BREAK; 
            
            } ELSE {
                MESSAGE 'Не заполнены файлы шаблонов для типов измерений для устройства ' + id(d) NOWAIT ;
            }
            
        }
 
    }
    APPLY ;
}

EXTEND FORM orgDevices
    PROPERTIES (o) onUpdateOrg
    PROPERTIES(o,d) onUpdateDB
;
/////