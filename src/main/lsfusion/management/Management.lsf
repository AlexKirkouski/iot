MODULE Management;

REQUIRE ControllerDevice, Device, Measurement, Schedule, Messenger, Location;

NAMESPACE ControllerManagement;

CLASS ControllerManager 'Управление';
name 'Название' = DATA STRING (ControllerManager);

CLASS ForceMode {
    on 'Включить принудительно',
    off 'Выключить принудительно'
}
mode = DATA ForceMode (ControllerManager);
nameMode 'Ручное управление' (ControllerManager c) = staticCaption(mode(c)) CHARWIDTH 10; 

CLASS ConditionType {
    and 'И',
    or 'ИЛИ'
}

CLASS ABSTRACT ManagerCondition 'Условие работы';
name 'Описание' = ABSTRACT STRING (ManagerCondition) IN id;
type = DATA ConditionType (ManagerCondition);
type(ManagerCondition c) <- ConditionType.and WHEN SET(c IS ManagerCondition);
controller = DATA ControllerManager (ManagerCondition) AUTOSET;
order 'Порядок' = DATA INTEGER (ManagerCondition) CHARWIDTH 2;
lastOrder = GROUP MAX order(ManagerCondition m) BY controller(m);
WHEN LOCAL SETCHANGED(controller(ManagerCondition m)) DO 
    order(m) <- lastOrder(controller(m)) (+) 1;
isLast (ManagerCondition c) = lastOrder(controller(c)) = order(c);
nameType 'Условие' (ManagerCondition c) = IF isLast(c) THEN '' ELSE staticCaption(type(c)) CHARWIDTH 3 ON CHANGE {
    IF NOT isLast(c) THEN
        DIALOG LIST ConditionType = type(c) CHANGE;  
}

conditionGroup (ManagerCondition m) = PARTITION SUM IF type(m) = ConditionType.or THEN 1 ELSE 0 ORDER DESC order(m), m BY controller(m) MATERIALIZED;
cgCount = GROUP SUM 1 BY controller(ManagerCondition g), conditionGroup(g) MATERIALIZED;
isTrue 'Работает сейчас' = ABSTRACT BOOLEAN (ManagerCondition) MATERIALIZED;
isTrue = GROUP SUM 1 IF isTrue(ManagerCondition m) BY controller(m), conditionGroup(m) MATERIALIZED; // количество выполняющихся условий в группе условий
isAutoTrue(ControllerManager mg) = GROUP SUM 1 IF cgCount(mg, INTEGER g) = isTrue(mg, g) MATERIALIZED;
shouldBeOn 'Должно быть включено' (ControllerManager mg) = mode(mg) = ForceMode.on OR (NOT mode(mg) = ForceMode.off AND isAutoTrue(mg)) MATERIALIZED; // проверяет работает условие или нет
isOn 'Включено' (ControllerManager mg) = DATA BOOLEAN (ControllerManager);
isNotWhatShould = shouldBeOn(ControllerManager mg) AND NOT isOn(mg) OR isOn(mg) AND NOT shouldBeOn(mg);
backgroundIsNotWhatShould = RGB(255, 0, 0) IF isNotWhatShould(ControllerManager mg);

CLASS ABSTRACT ConditionValue 'Значение';
name 'Имя' = ABSTRACT STRING (ConditionValue) IN id CHARWIDTH 50;
currentValue 'Значение' = ABSTRACT DOUBLE (ConditionValue) MATERIALIZED;

CLASS MeasurementConditionValue 'Значение измерения' : ConditionValue;
measurementConditionValue = AGGR MeasurementConditionValue WHERE number(type(Device device), MeasurementType measurementType);
currentValue(MeasurementConditionValue v) += lastValue(device(v), measurementType(v));
name(MeasurementConditionValue v) += 'Устройство: ' + id(device(v)) + ' - ' + name(measurementType(v)) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'отсутствует') + ' )';
CONSTRAINT device(MeasurementConditionValue v) AND measurementType(v) AND NOT number(type(device(v)), measurementType(v)) CHECKED BY measurementType, device[MeasurementConditionValue] MESSAGE 'Тип измерения должен соответствовать типу устройства';

CLASS AverageMeasurementConditionValue 'Среднее значение за интервал' : ConditionValue;
device = DATA Device (AverageMeasurementConditionValue) NONULL PREREAD;
measurementType = DATA MeasurementType (AverageMeasurementConditionValue) NONULL;
nameDevice 'Устройство' (AverageMeasurementConditionValue v) = id(device(v)) IN id;
nameMeasurementType 'Тип измерения' (AverageMeasurementConditionValue v) = name(measurementType(v)) IN id;
range 'Интервал' = DATA LONG (AverageMeasurementConditionValue) IN id;
currentValue(AverageMeasurementConditionValue v) += value(device(v), measurementType(v), subtractSeconds(currentZDateTimeSnapshot(), range(v)), currentZDateTimeSnapshot());
name(AverageMeasurementConditionValue v) += 'Среднее значение за интервал: ' + nameMeasurementType(v) + ' за ' + range(v) + 'с. на ' + nameDevice(v) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'отсутствует') + ' )';

CLASS InAreaConditionValue 'Находится в области' : ConditionValue;
device = DATA Device (InAreaConditionValue) NONULL PREREAD;
area = DATA Area (InAreaConditionValue) NONULL;
nameDevice 'Устройство' (InAreaConditionValue v) = id(device(v)) IN id;
nameArea 'Область' (InAreaConditionValue v) = name(area(v)) IN id;
currentValue(InAreaConditionValue v) += 1 IF isIn(device(v), area(v));
name(InAreaConditionValue v) += 'Находится в области: ' + nameDevice(v) + ' в ' + nameArea(v) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'отсутствует') + ' )';

CLASS FixedConditionValue 'Фиксированное значение' : ConditionValue;
value 'Значение' = DATA DOUBLE (FixedConditionValue) IN id;
name 'Название' = DATA STRING (FixedConditionValue) IN id; 
currentValue(FixedConditionValue v) += value(v);
name(FixedConditionValue v) += CONCAT ' : ', name(v), value(v);

CLASS DelayConditionValue 'Секунд с последнего измерения' : ConditionValue;
delayConditionValue = AGGR DelayConditionValue WHERE Device device IS Device;
currentValue(DelayConditionValue v) += subtractSeconds(dateTime(lastMeasurement(device(v))), currentZDateTimeSnapshot());
name(DelayConditionValue v) += 'Секунд с последнего измерения: ' + id(device(v)) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'отсутствует') + ' )';

changeDevice ABSTRACT (AverageMeasurementConditionValue);
FORM averageConditionValue
    OBJECTS v = AverageMeasurementConditionValue PANEL
    PROPERTIES (v) nameDevice ON CHANGE changeDevice(v), nameMeasurementType ON CHANGE {
        DIALOG measurementTypes OBJECTS m = measurementType(v) CHANGE FILTERS number(type(device(v)),m);
    }, range
; 

changeDevice ABSTRACT (InAreaConditionValue);
FORM inAreaConditionValue
    OBJECTS v = InAreaConditionValue PANEL
    PROPERTIES (v) nameDevice ON CHANGE changeDevice(v), nameArea;
; 

change ABSTRACT (ConditionValue);
change(FixedConditionValue fv) + {
    INPUT n = name(fv) CHANGE;
} 
FORM conditionValues 'Значения'
    OBJECTS v = ConditionValue
    PROPERTIES (v) objectClassName READONLY, name ON CHANGE change(v), currentValue, 
                fixed 'Фиксированное значение'=NEW[FixedConditionValue], 
                average 'Среднее за интервал'=NEW[AverageMeasurementConditionValue],
                in 'Проверка области'=NEW[InAreaConditionValue]                 
;
DESIGN conditionValues {
    OBJECTS {
        NEW add {
            caption = 'Добавить';
            type = CONTAINERH;
            MOVE PROPERTY (fixed);
            MOVE PROPERTY (average);
            MOVE PROPERTY (in);            
        }
    }
}


CLASS ValuesCondition 'Значение A больше или равно B' : ManagerCondition; // пока >=
left = DATA ConditionValue (ValuesCondition) NONULL;
right = DATA ConditionValue (ValuesCondition) NONULL;
 
nameLeft 'A ' (ValuesCondition c) = name(left(c));
nameRight 'B ' (ValuesCondition c) = name(right(c));
name(ValuesCondition v) += nameLeft(v) + ' >= ' + nameRight(v);
isTrue(ValuesCondition v) += currentValue(left(v)) >= currentValue(right(v));

dialogChangeLeftConditionValue ABSTRACT (ValuesCondition);
dialogChangeRightConditionValue ABSTRACT (ValuesCondition);
FORM valuesCondition 'Сравнение значений'
    OBJECTS vc = ValuesCondition PANEL
    PROPERTIES nameLeft(vc) ON CHANGE { dialogChangeLeftConditionValue(vc); }, 
               ''='>=' IF vc, 
               ' > B ' = nameRight(vc) ON CHANGE { dialogChangeRightConditionValue(vc);} 
;
edit(ValuesCondition v) + { DIALOG valuesCondition OBJECTS vc=v; }; // чтобы не во вкладке, а в диалоге показывалось

CLASS TimeCondition : ManagerCondition;
schedule = DATA Schedule (TimeCondition);
name(TimeCondition t) += name(schedule(t));
isTrue(TimeCondition t) += TRUE IF in(currentDateTimeSnapshot(), schedule(t));
newTimeCondition 'Добавить расписание' (ControllerManager m) {
    DIALOG LIST Schedule INPUT s DO
        NEW t = TimeCondition {
            controller(t) <- m;
            schedule(t) <- s;            
        }
}
edit(TimeCondition t) +{
    DIALOG LIST Schedule = schedule(t) CHANGE;
}

controllerDevice = DATA ControllerDevice (ControllerManager);
nameControllerDevice 'Устройство' (ControllerManager cm) = name(controllerDevice(cm));

CLASS ABSTRACT ManagerTo 'Кому';
name 'Имя' = ABSTRACT STRING (ManagerTo);
sendMessage ABSTRACT (ManagerTo, STRING);

EXTEND CLASS Chat : ManagerTo;
showName 'Отобр. имя' = DATA STRING (Chat);
EXTEND FORM messengers
    PROPERTIES showName(c)
;
name(Chat ch) += OVERRIDE showName(ch), Messenger.name(ch);
sendMessage(Chat ch, STRING text) + { Messenger.sendMessage(ch, text); }

CLASS EmailContact 'Email' : ManagerTo;
email = DATA STRING (EmailContact) IN id;
name(EmailContact ch) += email(ch);
sendMessage(EmailContact ch, STRING text) + {
    EMAIL SUBJECT text TO email(ch) BODY text;
}

in 'Вкл.' = DATA BOOLEAN (ManagerTo, ControllerManager);
nameChats 'Кому' (ControllerManager cm) = GROUP CONCAT name(Chat ch) IF in(ch, cm),',' ORDER ch;
FORM changeChats 'Выбор уведомлений'
    OBJECTS cm = ControllerManager PANEL
    OBJECTS ch = ManagerTo
    PROPERTIES in(ch, cm), objectClassName(ch) READONLY, name(ch) READONLYIF ch IS Chat
    PROPERTIES 'Добавить Email' = NEW[EmailContact](ch), DELETE(ch) SHOWIF ch IS EmailContact
;
dialogChangeChats ABSTRACT (ControllerManager);

// temp
chat = DATA Chat (ControllerManager);
onStarted() + {
    in(Chat c, ControllerManager m) <- TRUE WHERE chat(m) = c;
}

onMessage 'Сообщение вкл.' = DATA STRING (ControllerManager);
offMessage 'Сообщение выкл.' = DATA STRING (ControllerManager);

runOn(ControllerManager c) {
    IF controllerDevice(c) THEN
        runOn(controllerDevice(c));
    FOR in(ManagerTo ch, c) DO  
        sendMessage(ch, OVERRIDE onMessage(c), (CONCAT ' ', name(c), 'ON'));
}
runOff(ControllerManager c) {
    IF controllerDevice(c) THEN
        runOff(controllerDevice(c));
    FOR in(ManagerTo ch, c) DO  
        sendMessage(ch, OVERRIDE offMessage(c), (CONCAT ' ', name(c), 'OFF'));
}

FORM controllerManager 'Управление'
    OBJECTS c = ControllerManager PANEL
    PROPERTIES (c) name, nameControllerDevice, nameChats ON CHANGE dialogChangeChats(c), isOn, shouldBeOn, nameMode //, nameOn, nameOff
    OBJECTS mc = ManagerCondition
    PROPERTIES (mc) order, name READONLY, nameType, isTrue
    PROPERTIES (c) newTimeCondition DRAW mc TOOLBAR 
    PROPERTIES (mc) 'Добавить условие' = NEWEDIT[ValuesCondition], EDIT, DELETE GRID
    PROPERTIES (c) onMessage, offMessage
    FILTERS c = controller(mc)
    ORDER order(mc)
    
    EDIT ControllerManager OBJECT c;
;

DESIGN controllerManager {
    GROUP (,c) {
        type = CONTAINERV;
        fill = 1;
    }
    OBJECTS {
        NEW boxC BEFORE BOX(mc) {
            type = CONTAINERH;
            MOVE BOX(c) {
                fill = 1;
            }
            NEW notifications {
                caption = 'Уведомления';
                MOVE PROPERTY (nameChats(c));
                MOVE PROPERTY (onMessage(c));
                MOVE PROPERTY (offMessage(c));
                fill = 3;
            }
            NEW params {
                caption = 'Параметры работы';
                MOVE PROPERTY (isOn(c));
                MOVE PROPERTY (shouldBeOn(c));
                MOVE PROPERTY (nameMode(c));
                fill = 1;
            }
            alignment = STRETCH;            
//            NEW commands AFTER params {
//                caption = 'Команды';
//                MOVE PROPERTY (nameOn(c));
//                MOVE PROPERTY (nameOff(c));
//            }
        }
        NEW tab {
            type = TABBED;
            fill = 1;
            MOVE BOX(mc);
        }       
    }
}

checkWorking(ControllerManager c) {
    TRY {
        IF shouldBeOn(c) THEN {
            IF NOT isOn(c) THEN 
                runOn(c);
        } ELSE { 
            IF isOn(c) THEN 
                runOff(c);
        }
        isOn(c) <- shouldBeOn(c);
    }        
}

CLASS ManagerLog 'Лог управления';
manager = DATA ControllerManager (ManagerLog);
dateTime 'Время' = DATA ZDATETIME (ManagerLog);
isOn 'Вкл.' = DATA BOOLEAN (ManagerLog);
INDEX manager(ManagerLog l), dateTime(l), l;
lastLog = GROUP LAST ManagerLog l ORDER dateTime(l), l BY manager(l) MATERIALIZED;

WHEN CHANGED(isOn(ControllerManager c)) DO NEW l=ManagerLog {
    manager(l) <- c;
    dateTime(l) <- currentZDateTimeSnapshot();
    isOn(l) <- isOn(c);
}

EXTEND FORM controllerManager
    OBJECTS l=ManagerLog
    PROPERTIES (l) dateTime, isOn
    FILTERS manager(l) = c
;

DESIGN controllerManager {
    tab {
        MOVE BOX (l);  
    }
}

CLASS LastChangeConditionValue 'Секунд с последнего изменения' : ConditionValue;
lastChangeConditionValue = AGGR LastChangeConditionValue WHERE ControllerManager manager IS ControllerManager;
currentValue(LastChangeConditionValue v) += subtractSeconds(dateTime(lastLog(manager(v))), currentZDateTimeSnapshot());
name(LastChangeConditionValue v) += 'Секунд с последнего изменения: ' + name(manager(v)) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'отсутствует') + ' )';

CLASS StateConditionValue 'Включен' : ConditionValue;
stateConditionValue = AGGR StateConditionValue WHERE ControllerManager manager IS ControllerManager;
currentValue(StateConditionValue v) += 1 IF isOn(manager(v));
name(StateConditionValue v) += 'Включен: ' + name(manager(v)) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'выкл.') + ' )';

WHEN CHANGED(shouldBeOn(ControllerManager c)) DO {
    checkWorking(c);
}

controllerManager = GROUP AGGR ControllerManager mg BY controllerDevice(mg);
nameControllerManager(ControllerDevice cd) = name(controllerManager(cd));
isOn 'Включено' (ControllerDevice cd) = isOn(controllerManager(cd));

overNew ABSTRACT (ControllerManager, ControllerDevice);
setManager 'Задать' (ControllerDevice cd) {
    NEWSESSION {
        IF NOT controllerManager(cd) THEN {
            NEW cm = ControllerManager {
                name(cm) <- 'Управление ' + name(cd) + ' контр.:' + idController(cd);
                controllerDevice(cm) <- cd;
                overNew(cm, cd);
            }
        }
        
        edit(controllerManager(cd));
    }
}
dropManager 'Сбросить' (ControllerDevice cd) {
    NEWSESSION {
        APPLY controllerDevice(controllerManager(cd)) <- NULL;        
    }
}

EXTEND FORM controllers
    PROPERTIES (cd) isOn BACKGROUND backgroundIsNotWhatShould(controllerManager(cd))
    PROPERTIES (cd) PANEL setManager, dropManager
;

DESIGN controllers {
    BOX (cd) {
        NEW manager {
            caption = 'Управление';
            type = CONTAINERH;
            MOVE PROPERTY (setManager(cd)) { fill = 1; }
            MOVE PROPERTY (dropManager(cd)) { fill = 1; };
            alignment = STRETCH;           
        }
    }
}

FORM controllerManagers 'Управления'
    OBJECTS cm = ControllerManager
    PROPERTIES (cm) NEWSESSION name, isOn BACKGROUND backgroundIsNotWhatShould(cm), NEW, EDIT, DELETE
;

NAVIGATOR {
    equipment {
        NEW controllerManagers;
    }
}

DESIGN controllerManagers {
    OBJECTS {
        NEW split {
            type = SPLITV;
            NEW top {
                MOVE BOX (cm);
                fill = 1;
            }
            NEW tab {
                type = TABBED;
            }
            fill = 1;
        }
    }
}

EXTEND FORM controllerManagers
    OBJECTS cv = FixedConditionValue
    PROPERTIES (cv) READONLY name, value
;

DESIGN controllerManagers {
    tab {
        type = TABBED;
        MOVE BOX (cv) {
            caption = 'Параметры управления';
        }
    }
}
