MODULE Management;

REQUIRE ControllerDevice, Device, Measurement, Schedule, Messenger;

NAMESPACE ControllerManagement;

CLASS ControllerManager 'Управление';
name 'Название' = DATA STRING (ControllerManager);

CLASS ForceMode {
    on 'Включить принудительно',
    off 'Выключить принудительно'
}
mode = DATA ForceMode (ControllerManager);
nameMode 'Ручное управление' (ControllerManager c) = staticCaption(mode(c)); 

CLASS ConditionType {
    and 'И',
    or 'ИЛИ'
}

CLASS ABSTRACT ManagerCondition 'Условие работы';
name 'Описание' = ABSTRACT STRING (ManagerCondition) IN id;
type = DATA ConditionType (ManagerCondition);
type(ManagerCondition c) <- ConditionType.and WHEN SET(c IS ManagerCondition);
controller = DATA ControllerManager (ManagerCondition) AUTOSET;
order 'Порядок' = DATA INTEGER (ManagerCondition) CHARWIDTH 2;
lastOrder = GROUP MAX order(ManagerCondition m) BY controller(m);
WHEN LOCAL SETCHANGED(controller(ManagerCondition m)) DO 
    order(m) <- lastOrder(controller(m)) (+) 1;
isLast (ManagerCondition c) = lastOrder(controller(c)) = order(c);
nameType 'Условие' (ManagerCondition c) = IF isLast(c) THEN '' ELSE staticCaption(type(c)) CHARWIDTH 3 ON CHANGE {
    IF NOT isLast(c) THEN
        DIALOG LIST ConditionType = type(c) CHANGE;  
}

conditionGroup (ManagerCondition m) = PARTITION SUM IF type(m) = ConditionType.or THEN 1 ELSE 0 ORDER DESC order(m), m BY controller(m) MATERIALIZED;
cgCount = GROUP SUM 1 BY controller(ManagerCondition g), conditionGroup(g) MATERIALIZED;
isTrue 'Работает сейчас' = ABSTRACT BOOLEAN (ManagerCondition) MATERIALIZED;
isTrue = GROUP SUM 1 IF isTrue(ManagerCondition m) BY controller(m), conditionGroup(m) MATERIALIZED; // количество выполняющихся условий в группе условий
isAutoTrue(ControllerManager mg) = GROUP SUM 1 IF cgCount(mg, INTEGER g) = isTrue(mg, g) MATERIALIZED;
shouldBeOn 'Должно быть включено' (ControllerManager mg) = mode(mg) = ForceMode.on OR (NOT mode(mg) = ForceMode.off AND isAutoTrue(mg)) MATERIALIZED; // проверяет работает условие или нет
isOn 'Включено' (ControllerManager mg) = DATA BOOLEAN (ControllerManager);
isNotWhatShould = shouldBeOn(ControllerManager mg) AND NOT isOn(mg) OR isOn(mg) AND NOT shouldBeOn(mg);
backgroundIsNotWhatShould = RGB(255, 0, 0) IF isNotWhatShould(ControllerManager mg);

CLASS ABSTRACT ConditionValue 'Значение';
name 'Имя' = ABSTRACT STRING (ConditionValue) IN id CHARWIDTH 50;
currentValue 'Значение' = ABSTRACT DOUBLE (ConditionValue) MATERIALIZED;

CLASS MeasurementConditionValue 'Значение измерения' : ConditionValue;
measurementConditionValue = AGGR MeasurementConditionValue WHERE number(type(Device device), MeasurementType measurementType);
currentValue(MeasurementConditionValue v) += lastValue(device(v), measurementType(v));
name(MeasurementConditionValue v) += 'Устройство: ' + id(device(v)) + ' - ' + name(measurementType(v)) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'отсутствует') + ' )';

CLASS FixedConditionValue 'Фиксированное значение' : ConditionValue;
value 'Значение' = DATA DOUBLE (FixedConditionValue) IN id;
name 'Название' = DATA STRING (FixedConditionValue) IN id; 
currentValue(FixedConditionValue v) += value(v);
name(FixedConditionValue v) += CONCAT ' : ', name(v), value(v);

CLASS DelayConditionValue 'Секунд с последнего измерения' : ConditionValue;
delayConditionValue = AGGR DelayConditionValue WHERE Device device IS Device;
currentValue(DelayConditionValue v) += subtractSeconds(dateTime(lastMeasurement(device(v))), currentDateTimeSnapshot());
name(DelayConditionValue v) += 'Секунд с последнего измерения: ' + id(device(v)) + ' (тек. зн.: ' + (OVERRIDE currentValue(v)+'', 'отсутствует') + ' )';

FORM conditionValues 'Значения'
    OBJECTS v = ConditionValue
    PROPERTIES (v) objectClassName READONLY, name ON CHANGE {
        FOR FixedConditionValue fv = v AS FixedConditionValue DO
            INPUT n = name(fv) CHANGE;
    }, currentValue, 'Добавить фиксированное значение'=NEW[FixedConditionValue]
;

CLASS ValuesCondition 'Значение A больше или равно B' : ManagerCondition; // пока >=
left = DATA ConditionValue (ValuesCondition) NONULL;
right = DATA ConditionValue (ValuesCondition) NONULL;
CONSTRAINT device(MeasurementConditionValue v) AND measurementType(v) AND NOT number(type(device(v)), measurementType(v)) CHECKED BY measurementType, device MESSAGE 'Тип измерения должен соответствовать типу устройства';
 
nameLeft 'A ' (ValuesCondition c) = name(left(c));
nameRight 'B ' (ValuesCondition c) = name(right(c));
name(ValuesCondition v) += nameLeft(v) + ' >= ' + nameRight(v);
isTrue(ValuesCondition v) += currentValue(left(v)) >= currentValue(right(v));

dialogChangeLeftConditionValue ABSTRACT (ValuesCondition);
dialogChangeRightConditionValue ABSTRACT (ValuesCondition);
FORM valuesCondition 'Сравнение значений'
    OBJECTS vc = ValuesCondition PANEL
    PROPERTIES nameLeft(vc) ON CHANGE { dialogChangeLeftConditionValue(vc); }, 
               ''='>' IF vc, 
               ' > B ' = nameRight(vc) ON CHANGE { dialogChangeRightConditionValue(vc);} 
;
edit(ValuesCondition v) + { DIALOG valuesCondition OBJECTS vc=v; }; // чтобы не во вкладке, а в диалоге показывалось

CLASS TimeCondition : ManagerCondition;
schedule = DATA Schedule (TimeCondition);
name(TimeCondition t) += name(schedule(t));
isTrue(TimeCondition t) += TRUE IF in(currentDateTimeSnapshot(), schedule(t));
newTimeCondition 'Добавить расписание' (ControllerManager m) {
    DIALOG LIST Schedule INPUT s DO
        NEW t = TimeCondition {
            controller(t) <- m;
            schedule(t) <- s;            
        }
}
edit(TimeCondition t) +{
    DIALOG LIST Schedule = schedule(t) CHANGE;
}

controllerDevice = DATA ControllerDevice (ControllerManager);
nameControllerDevice 'Устройство' (ControllerManager cm) = name(controllerDevice(cm));

chat = DATA Chat (ControllerManager);
nameChat 'Чат' (ControllerManager cm) = name(chat(cm));

runOn(ControllerManager c) {
    IF controllerDevice(c) THEN
        runOn(controllerDevice(c));
    IF chat(c) THEN 
        sendMessage(chat(c), CONCAT ' ', name(c), 'ON');
}
runOff(ControllerManager c) {
    IF controllerDevice(c) THEN
        runOff(controllerDevice(c));
    IF chat(c) THEN 
        sendMessage(chat(c), CONCAT ' ', name(c), 'OFF');
}

FORM controllerManager 'Управление'
    OBJECTS c = ControllerManager PANEL
    PROPERTIES (c) name, nameControllerDevice, nameChat, isOn, shouldBeOn, nameMode //, nameOn, nameOff
    OBJECTS mc = ManagerCondition
    PROPERTIES (mc) order, name READONLY, nameType, isTrue
    PROPERTIES (c) newTimeCondition DRAW mc TOOLBAR 
    PROPERTIES (mc) 'Добавить условие' = NEWEDIT[ValuesCondition], EDIT, DELETE GRID
    FILTERS c = controller(mc)
    ORDER order(mc)
    
    EDIT ControllerManager OBJECT c;
;

DESIGN controllerManager {
    GROUP (,c) {
        type = CONTAINERV;
        fill = 1;
    }
    OBJECTS {
        NEW boxC BEFORE BOX(mc) {
            type = CONTAINERH;
            MOVE BOX(c) {
                fill = 1;
            }
            NEW params AFTER BOX(c) {
                caption = 'Параметры работы';
                MOVE PROPERTY (isOn(c));
                MOVE PROPERTY (shouldBeOn(c));
                MOVE PROPERTY (nameMode(c));
                fill = 1;
            }
            alignment = STRETCH;            
//            NEW commands AFTER params {
//                caption = 'Команды';
//                MOVE PROPERTY (nameOn(c));
//                MOVE PROPERTY (nameOff(c));
//            }
        }        
    }
}

checkWorking(ControllerManager c) {
    TRY {
        IF shouldBeOn(c) THEN {
            IF NOT isOn(c) THEN 
                runOn(c);
        } ELSE { 
            IF isOn(c) THEN 
                runOff(c);
        }
        isOn(c) <- shouldBeOn(c);
    }        
}

WHEN CHANGED(shouldBeOn(ControllerManager c)) DO {
    checkWorking(c);
}

controllerManager = GROUP AGGR ControllerManager mg BY controllerDevice(mg);
nameControllerManager(ControllerDevice cd) = name(controllerManager(cd));
isOn 'Включено' (ControllerDevice cd) = isOn(controllerManager(cd));

overNew ABSTRACT (ControllerManager, ControllerDevice);
setManager 'Задать' (ControllerDevice cd) {
    NEWSESSION {
        IF NOT controllerManager(cd) THEN {
            NEW cm = ControllerManager {
                name(cm) <- 'Управление ' + name(cd) + ' контр.:' + idController(cd);
                controllerDevice(cm) <- cd;
                overNew(cm, cd);
            }
        }
        
        edit(controllerManager(cd));
    }
}
dropManager 'Сбросить' (ControllerDevice cd) {
    NEWSESSION {
        APPLY controllerDevice(controllerManager(cd)) <- NULL;        
    }
}

EXTEND FORM controllers
    PROPERTIES (cd) isOn BACKGROUND backgroundIsNotWhatShould(controllerManager(cd))
    PROPERTIES (cd) PANEL setManager, dropManager
;

DESIGN controllers {
    BOX (cd) {
        NEW manager {
            caption = 'Управление';
            type = CONTAINERH;
            MOVE PROPERTY (setManager(cd)) { fill = 1; }
            MOVE PROPERTY (dropManager(cd)) { fill = 1; };
            alignment = STRETCH;           
        }
    }
}

FORM controllerManagers 'Управления'
    OBJECTS cm = ControllerManager
    PROPERTIES (cm) NEWSESSION name, isOn BACKGROUND backgroundIsNotWhatShould(cm), NEW, EDIT, DELETE
;

NAVIGATOR {
    equipment {
        NEW controllerManagers;
    }
}

DESIGN controllerManagers {
    OBJECTS {
        NEW split {
            type = SPLITV;
            NEW top {
                MOVE BOX (cm);
                fill = 1;
            }
            NEW tab {
                type = TABBED;
            }
            fill = 1;
        }
    }
}

EXTEND FORM controllerManagers
    OBJECTS cv = FixedConditionValue
    PROPERTIES (cv) READONLY name, value
;

DESIGN controllerManagers {
    tab {
        type = TABBED;
        MOVE BOX (cv) {
            caption = 'Параметры управления';
        }
    }
}
