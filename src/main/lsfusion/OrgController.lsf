MODULE OrgController;

REQUIRE Controller, Options, Security;

organization 'Организация' = DATA Organization (Controller) AUTOSET;
nameOrganization 'Организация' = name(organization(Controller c));

FORM orgControllers 'Организации и их контроллеры'
    OBJECTS o = Organization
    PROPERTIES(o) READONLY name, unn, address

    OBJECTS c = Controller
    PROPERTIES(c) select
    PROPERTIES(c) READONLY id, dateCreation, nametype
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE
    ORDER nametype(c), id(c)
    FILTERS organization(c) = o
;

DESIGN orgControllers {
    NEW split {
        type = SPLITV;
        NEW types {
            type = SPLITH ;
            MOVE BOX(o) {
                caption = 'Организации';
                flex = 1;
            }
            fill = 1;
        }
        NEW tab {
            type = SPLITH ;
            MOVE BOX(c) {
                caption = 'Контроллеры';
                flex = 1;
            }
            fill = 2;
        }
        fill = 1;
    }
    MOVE TOOLBARBOX;
}
/////

///// Ввод новых контроллеров по организации (контроллеров, которые не принадлежат организации)
FORM insertControllers 'Свободные контроллеры'
    OBJECTS c = Controller
    PROPERTIES(c) select
    PROPERTIES(c) READONLY id, nametype, dateCreation
    ORDER nametype(c), id(c)
    FILTERS NOT organization(c)
;

insertControllersOrg 'Добавить контроллеры' (Organization o) {
    NEWSESSION {
        SHOW insertControllers ;
        FOR select(Controller c) AND NOT organization(c) DO {
            organization(c) <- o;
            select(c) <- NULL;
        }
        APPLY ;
    }
}

///// Удаление отмеченных по организации контроллеров
deleteControllersOrg 'Удалить отмеченные контроллеры' (Organization o) {
    NEWSESSION NESTED(select) {
        FOR select(Controller c) AND organization(c) = o DO {
            organization(c) <- NULL;
        }
        APPLY ;
    }
}

EXTEND FORM orgControllers
    PROPERTIES(o) insertControllersOrg, deleteControllersOrg ;
/////

///// Журнал переданных команд на контроллеры
CLASS RunCommand 'Переданные команды на контроллеры';
TABLE runCommand(RunCommand);

controller =   DATA Controller    (RunCommand);
controllerId  'ИД устройства'     (RunCommand r) = id(controller(r)) MATERIALIZED;
command =      DATA Command       (RunCommand);
commandId     'ИД команды'        (RunCommand r) = id(command(r)) MATERIALIZED;
commandName   'Название команды'  (RunCommand r) = name(command(r)) MATERIALIZED;
commandSignal 'Сигнал управления' (RunCommand r) = signal(command(r)) MATERIALIZED;

dateTime      'Время'        = DATA DATETIME      (RunCommand);
userCreation  'Кто передал'  = DATA BPSTRING[100] (RunCommand);

eMessage      'Текст ошибки' = DATA STRING[100]   (RunCommand);
eCode         'Код ошибки'   = DATA INTEGER       (RunCommand);

FORM runCommands 'Журнал переданных команд'
    OBJECTS o = Organization
    PROPERTIES(o) READONLY name, unn, address
    FILTERS mainRole(currentUser()) == userRoleSID('admins') OR (mainRole(currentUser()) == userRoleSID('users')  AND organization(currentUser()) == o)
    
    OBJECTS r = RunCommand 
    PROPERTIES(r) READONLY dateTime, controllerId, commandId, commandName, commandSignal, userCreation, eCode, eMessage
    ORDER dateTime(r) DESC
    FILTERS organization(controller(r)) = o   
;
/////

///// Передача сигнала управления на контроллер
cntEMessage    'Текст ошибки'      = DATA STRING[100] ();
cntECode       'Код ошибки'        = DATA INTEGER ();

// внешний модуль передачи сигналов управления 
mqttRunContent INTERNAL 'mqtt.MqttRunContent' (MqttServer, Controller, STRING ); 

transmitControlSignal 'Передача сигнала управления' (Command cm, Controller c, STRING[100] login) {
    NEWSESSION {    
        cntEMessage() <- '';
        cntECode() <- 0;
        mqttRunContent(server(c), c, signal(cm));
        
        NEW r = RunCommand {
            controller(r) <- c;
            command(r) <- cm;
            dateTime(r) <- currentDateTime();
            userCreation(r) <- OVERRIDE login, 'Планировщик';
            IF cntECode() > 0 THEN {
                eCode(r) <- cntECode();
                eMessage(r) <- cntEMessage();
            }
        }
        IF login THEN APPLY ;
        
        IF cntECode() > 0 AND login THEN MESSAGE cntEMessage();
    }
}

// вызов 'Передача сигнала управления' из планировщика
transmitControlSignalScheduler 'Передача сигнала управления (планировщик)' (Command cm, Controller c) {
    EXEC transmitControlSignal(cm, c, NULL);
}
// вызов 'Передача сигнала управления' вручную
transmitControlSignalUser 'Передача сигнала управления' (Command cm, Controller c) {
    EXEC transmitControlSignal(cm, c, login(currentUser()));
}
/////

///// Форма "Организации - контроллеры - команды"
FORM orgControllerCommands 'Команды контроллеров'
    
    OBJECTS o = Organization
    PROPERTIES(o) READONLY name
    FILTERS mainRole(currentUser()) == userRoleSID('admins') OR (mainRole(currentUser()) == userRoleSID('users')  AND organization(currentUser()) == o) 
    
    OBJECTS c = Controller
    PROPERTIES(c) READONLY id, dateCreation, nametype
    ORDER nametype(c), id(c)
    FILTERS organization(c) = o
    
    OBJECTS cm = Command
    PROPERTIES(cm) READONLY id, name, signal
    PROPERTIES(cm, c) transmitControlSignalUser 
    FILTERS controllerType(cm) = type(c)
    ORDER name(cm)
;

DESIGN orgControllerCommands {
    OBJECTS {
        NEW split {
            type = SPLITV;
            NEW clients {
                type = SPLITH ;
                MOVE BOX(o) {
                    caption = 'Организации';
                    flex = 1;
                }
                fill = 1;
            }
            NEW tab {
                type = SPLITH ;
                MOVE BOX(c) {
                    caption = 'Контроллеры';
                    flex = 2;
                }
                MOVE BOX(cm) {
                    caption = 'Команды';
                    flex = 5;
                }
                fill = 2;
            }
            fill = 1;
        }
    }
}

EXTEND FORM controllers
    PROPERTIES (c) nameOrganization;
;
