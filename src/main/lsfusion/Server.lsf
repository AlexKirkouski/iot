MODULE Server;

//REQUIRE Device, SystemEvents, Measurement, Options, Organization, ClientDevice, ClientMeasurement;
REQUIRE Device, SystemEvents, Measurement, Options, Organization, OrgDevice;

CLASS Server 'Сервер';
name 'Наименование сервера' =  DATA STRING[100] (Server) CHARWIDTH 70;
port 'Порт' = DATA INTEGER (Server);
qps 'Кол-во пакетов для записи' = DATA INTEGER (Server);  // кол-во пакетов перед записью
isRunning 'Запущен' = DATA BOOLEAN (Server);

startUDPServer INTERNAL 'mite.StartUDPServerAction' (Server, INTEGER, TEXT);
stopUDPServer INTERNAL 'mite.StopUDPServerAction' (Server);

startServer 'Запустить сервер' (Server server) {    
    APPLY isRunning(server) <- TRUE;
    
    startUDPServer(server, port(server), 'importCSV');
}
stopServer 'Остановить сервер' (Server server) {
    stopUDPServer(server);

    APPLY isRunning(server) <- NULL;
}

server = DATA Server (Measurement);

FORM servers 'Сервера' 
    OBJECTS s = Server
    PROPERTIES (s) name, qps, port, NEW, DELETE
    PROPERTIES (s) TOOLBAR startServer SHOWIF NOT isRunning(s), stopServer SHOWIF isRunning(s)
    
    OBJECTS (m = Measurement, mt = MeasurementType)
    PROPERTIES (m) dateTime READONLY 
    PROPERTIES 'ИД'=(OVERRIDE deviceId(m)+'', idImport(m) + '(не найдено)') READONLY
    PROPERTIES value(m, mt) READONLY 
    ORDER dateTime(m) DESC
    FILTERS server(m) = s  
;

NAVIGATOR {
    //NEW FOLDER measurements 'Измерения' IMAGE '/mes.png' WINDOW toolbar FIRST {
    NEW FOLDER measurements 'Измерения' WINDOW toolbar FIRST {
        NEW servers;
        NEW organization;
        NEW devices;
        NEW orgDevices;
        NEW orgMeasurements;
    }
}

onStarted() + {
    FOR isRunning(Server s) DO {
        startUDPServer(s, port(s), 'importCSV');
    }
}

// IMPORT
fieldImport(n, DeviceType dt, MeasurementType mt) = 'field' + (n IF n=number(dt, mt));
importCSVScript 'Скрипт импорта' (DeviceType dt) = 'run(Server server, CSVFILE file) \{\n'+
                                                '\t'+  'IMPORT CSV NOHEADER FROM file FIELDS DATETIME dt, LONG id' + (OVERRIDE (GROUP CONCAT ', DOUBLE '+fieldImport(n, dt, MeasurementType mt), '' ORDER n),'') + ' DO \{\n' +
                                                '\t\t'+       'NEW m = Measurement \{\n' +
                                                '\t\t\t'+            'dateTime(m) <- dt;\n' +
                                                '\t\t\t'+            'device(m) <- device(id);\n' +
                                                '\t\t\t'+            'idImport(m) <- id;\n' +
                                                '\t\t\t'+            'server(m) <- server;\n' +
                                      (OVERRIDE('\t\t\t'+            'value(m, MeasurementType mt) <- CASE EXCLUSIVE' + (GROUP CONCAT ' WHEN LONG(mt)=' + LONG(MeasurementType mt) + ' THEN ' + fieldImport(n, dt, mt),'' ORDER n) + ';\n'),'') + 
                                                '\t\t'+       '\}\n' + 
                                                '\t'+  '\}\n' +
                                                '\t'+  'APPLY;\n' +
                                                '\}\n';

EXTEND FORM devices
    PROPERTIES (t) importCSVScript
;                                                 

importCSV(DeviceType dt, Server server, CSVFILE file) {
    EVAL importCSVScript(dt) PARAMS server,  file;
}

// TEST
importCSVTest(DeviceType dt) {
    INPUT f = CSVFILE DO {
        EXEC importCSV(dt, NULL, f) ;
    }
}
EXTEND FORM devices
    PROPERTIES importCSVTest(t) TOOLBAR;