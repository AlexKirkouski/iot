MODULE GrafanaDevice;

REQUIRE Grafana, Device, OrgDevice, GrafanaMeasurement;

NAMESPACE Device;

// Заполняется при передаче дашбоарда в Графану
dbId 'ID DashBoard' = DATA INTEGER (Device) CHARWIDTH 7;

fileDashboard 'Файл шаблона Dashboard' = DATA FILE (DeviceType) CHARWIDTH 7 IN id;

dsGrafana INTERNAL 'grafana.GrafanaAction' (Organization, Device);
updateDashBoards 'Обновить дэшборд' (Device d) {
    
    FOR Organization o = organization(d) DO {
        
        IF NOT fileDashboard(type(d)) THEN {
            MESSAGE 'Отсутствует файл шаблона для устройства ' + id(d) NOWAIT ;
        }
        ELSE {                
            LOCAL textDashboard = TEXT ();
            LOCAL textAllPanels = TEXT ();
            
            fileToString(fileDashboard(type(d))) ;
            textDashboard() <- resultString();
            textAllPanels() <- '';
            
            FOR index(type(d), MeasurementType mt) ORDER index(type(d), mt) DO {
                IF filePanel(mt) THEN {
                    fileToString(filePanel(mt));
                    resultString() <- replace(resultString(), '<<ID_PANEL>>', TEXT (id(mt)));
                    resultString() <- replace(resultString(), '<<NAME_PANEL>>', name(mt));
                    resultString() <- replace(resultString(), '<<ID_DEVICE>>', TEXT (id(d)));
                    resultString() <- replace(resultString(), '<<ID_MeasurementType>>', TEXT (id(mt)));
                    resultString() <- replace(resultString(), '<<dsName>>', TEXT (dsName(o)));
                    
                    IF length(textAllPanels()) > 0 THEN  textAllPanels() <- textAllPanels() + ',';
                    textAllPanels() <- textAllPanels() + resultString();
                }    
            }
            
            IF length(textAllPanels()) > 0 THEN {
                textDashboard() <- replace(textDashboard(), '<<TITLE>>', grName(o) + '_' + TEXT (id(d)));
                textDashboard() <- replace(textDashboard(), '<<PANELS>>', textAllPanels());
                textDashboard() <- replace(textDashboard(), '<<ID_DEVICE>>', TEXT (id(d)));
                textDashboard() <- replace(textDashboard(), '<<dsName>>', TEXT (dsName(o)));
    
                fillGrafanaOrgAndAuth(orgId(o));
                EXTERNAL HTTP POST '${grafanaApiURL()}/dashboards/import' HEADERS headers PARAMS
                    JSONFILE(textDashboard())
                    TO exportJSON;
                IMPORT FROM exportJSON() FIELDS () INTEGER dashboardId DO
                    APPLY dbId(d) <- dashboardId;
            } ELSE {
                MESSAGE 'Не заполнены файлы шаблонов для типов измерений для устройства ' + id(d) NOWAIT ;
            }
        }
    }
}

EXTEND FORM deviceTypes
    PROPERTIES (t) fileDashboard
;

DESIGN devices {
    tab {
        NEW settings {
            caption = 'Настройки';
        }
    }
}

getUID = DATA LOCAL STRING();
getUIDByID(INTEGER id) {
    fillGrafanaAuth();

    EXTERNAL HTTP GET '${grafanaApiURL()}/search?dashboardIds=${id}' HEADERS headers TO exportJSON;

    LOCAL uid = STRING (INTEGER);
    IMPORT FROM exportJSON() TO uid;

    IF NOT imported(0) THEN
        throwException('Not found');
    ELSE
        getUID() <- uid(0);
}

// PUBLIC DASHBOARDS

publicToken = DATA STRING (Device); 

makeDashboardPublic 'Встроить дэшборд' (Device d) {    
    getUIDByID(dbId(d));

    fillGrafanaAuth();
    TRY
        EXTERNAL HTTP POST '${grafanaApiURL()}/dashboards/uid/${getUID()}/public-dashboards/' HEADERS headers PARAMS 
            JSON FROM timeSelectionEnabled = TRUE, isEnabled = TRUE, annotationsEnabled = TRUE  
            TO exportJSON;
    CATCH {
        IMPORT FROM exportJSON() FIELDS () STRING message DO {
            IF message = 'Dashboard is already public' THEN {
                EXTERNAL HTTP GET '${grafanaApiURL()}/dashboards/uid/${getUID()}/public-dashboards/' HEADERS headers
                    TO exportJSON;
            } ELSE             
                throwException(message);
        } ELSE
            throwException(messageCaughtException());
    }
    
    IMPORT FROM exportJSON() FIELDS () STRING accessToken DO {
        APPLY publicToken(d) <- accessToken;
        RETURN;
    }
    
    throwException('Something went wrong');
}


EXTEND FORM devices    
    PROPERTIES dashboard = HTML('<iframe src="${grafanaUrl()}/public-dashboards/${publicToken(d)}" style="height:100%;width:100%"/>') SHOWIF publicToken(d) AND dbId(d) PANEL
    PROPERTIES makeDashboardPublic(d) SHOWIF NOT publicToken(d) AND dbId(d) PANEL
    PROPERTIES updateDashBoards(d) SHOWIF NOT dbId(d) PANEL
;

DESIGN devices {
    tab {
        NEW dashboard {
            caption = 'Дэшборд';
            MOVE PROPERTY(dashboard) {
                fill = 1;
            }
            MOVE PROPERTY(makeDashboardPublic(d)) {
                alignment = CENTER;
            }
            MOVE PROPERTY(updateDashBoards(d)) {
                alignment = CENTER;
            }
            childrenAlignment = CENTER;
        }
    }
}

EXTEND FORM devices
    PROPERTIES (d) PANEL updateDBPanel = updateDashBoards, dbId, makeDBPublicPanel = makeDashboardPublic, publicToken 
;

DESIGN devices {
    settings {
        MOVE PROPERTY (updateDBPanel);
        MOVE PROPERTY (dbId(d));
        MOVE PROPERTY (makeDBPublicPanel);
        MOVE PROPERTY (publicToken(d));
    }
}

